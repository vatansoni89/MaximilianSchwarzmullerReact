create react app:
  create-react-app react-complete-guide --scripts-version 1.1.5
  cd react-complete-guide
  npm start

public
  index.html
    <div id="root"></div>
      our code will be injected here.

jsx restrictions:
  only one root html element.
  use className for css class (instaed of class)

component creating approach:
  create class with importing React, {Component} and extend Component class. (Like App)
  create function  which return some jsx (html)
        
import React:
  reactCreateElement:  jsx syntex need to be transformed to reactCreateElement and for that we need to import React.

import component:
  always give name starting from upper case. (import Person from "./Person/Person.js";)  

/***

Components & JSX Cheat Sheet
Components are the core building block of React apps. Actually, React really is just a library for creating components in its core.

A typical React app therefore could be depicted as a component tree - having one root component ("App") and then an potentially infinite amount of nested child components.

Each component needs to return/ render some JSX code - it defines which HTML code React should render to the real DOM in the end.

JSX is NOT HTML but it looks a lot like it. Differences can be seen when looking closely though (for example className in JSX vs class in "normal HTML"). JSX is just syntactic sugar for JavaScript, allowing you to write HTMLish code instead of nested React.createElement(...) calls.

When creating components, you have the choice between two different ways:

Functional components (also referred to as "presentational", "dumb" or "stateless" components - more about this later in the course) => const cmp = () => { return <div>some JSX</div> } (using ES6 arrow functions as shown here is recommended but optional)
class-based components (also referred to as "containers", "smart" or "stateful" components) => class Cmp extends Component { render () { return <div>some JSX</div> } } 
We'll of course dive into the difference throughout this course, you can already note that you should use 1) as often as possible though. It's the best-practice.

***/  

component benefit:
  reusable: define once use multiple time.
  custom html component.

state:
  its a special property. (reserved word. )
  only available in class which extends component.
  if it changes it will lead react to update the dom and re-render.

switchNameHandler:
  don't add () in button onClick prop.  

ReactHook:
  use:
    useState({})
      [0]: state object
      [1]: fun to change state object, and it replaces the old with new. If old hv 2 props and new have 1 then both will be replaced by 1. To avoid it use replacing specific prop {specificProp: value}

container or Stateful or Smart component are same.      

click={() => this.switchNameHandler("By-Function-Call")}
  () => this.switchNameHandler("By-Function-Call")
    It returns function call, and executes on click only (not immediate)
      This can be in-efficient.

.net core 3: https://www.youtube.com/watch?v=W8yL8vRnUnA

don't mutate the original state, create and copy and update and set that.

list
  key: need to be unique, need not to be a number.

nameChangedHandler with 2way binding:
  Get person by id and update copy of that. Then create copy of list and update this person there and set state again.
  index auto-generated 0,1,2...

styles:
  https://create-react-app.dev/docs/adding-a-css-modules-stylesheet (this feature is available with react-scripts@2.0.0 and higher)
  we cannt hv hover style, we need 3rd party tool for it like radium.
    npm install --save radium  (--save: to also save entry in package.json)
      it allows in-line style with sudo-selector and media quieries.

Debugging:
  ErrorBoundary:
   Works only in production.
    
  Where did all of the DOM elements go?
    https://reactjs.org/blog/2019/08/15/new-react-devtools.html#where-did-all-of-the-dom-elements-go

---------------------------------------Life-Cycle------------------------------------------------------------

Side-Effects: Sending http request.

Component Lifecycle - Creation:
      constructor(props): 
        Call super(props)
        Do: Set up StatefulDON'T: Cause Side-Effects
      static getDerivedStateFromProps(props, state):
        DO: Sync stateDON'T: Cause Side-Effects
      render():
        Prepare & structure your JSX Code
      Render Child Components:  
      componentDidMount():
        DO: Cause Side-Effects
        DON'T: Update State (triggers re-render)

Component Lifecycle - Update:
  static getDerivedStateFromProps(props, state):
    Returns state
    DO: Sync State to Props
    DON'T: Cause Side-Effects
  shouldComponentUpdate(nextProps, nextState):
    Return bool
    DO: Decide whether to Continue or Not
    DON'T: Cause Side-Effects
  render(): 
    return jsx
    Prepare & structure your JSX Code
  Update Child Component props
  getSnapshotBeforeUpdate(prevProps, prevState):
    DO: Last- minute DOM ops
    DON'T: Cause Side-Effects
  componentDidUpdate(prevProps,prevState,snapshot):
    It can use snapshot created by getSnapshotBeforeUpdate(prevProps, prevState)
    DO: Cause Side-Effects
    DON'T: Update State (trigger re-render)
---------------------------------------------Class-based vs Functional Component----------------
class-based:
  class XY extends Component
  Access to StateLifecycle Hooks
  Access State and Props vis "this":
    this.state.XY & this.props.XY
  Use if you need to manage State or access to Lifecycle Hooks and you don't want to use React Hooks!

Functional:
  const XY = props => {...}
  Access to State (useState())
  Access Props via "props":
    props.XY
  Use in all other Cases
-----------------------Flow------------------------------------

On first time load:
  [App.js] constructor
  [App.js] getDerivedStateFromProps
  [App.js] render
  [App.js] componentDidMount

On Togggle Persons Button Click:
  [App.js] getDerivedStateFromProps
  [App.js] render
  [Persons.js] rendering...
  [App.js] componentDidUpdate

  --------------------------useEffect--------------------------------

  ReactHooks:
    - It can be only with functional component.
    - Cover all the class-based lifecycle hooks.
    - Its react hook not life-cycle hook.
    useEffect:
      - We can have multiple useEffect
      - dependency array for managing them
      
------------------------Clean-up with Life-Cycle hooks and UseEffect-----------------

ReactHooks:
  useEffect:
  - cleanup return function for function component (Cockpit.js)
      It runs before the main useEffect fun runs but after the (first) render cycle.
  - If we have empty array [] as dependency then useEffect will only execute the inner function() when component is rendered or unmounted.
  - clean-up for class component (Persons.js):
      componentWillUnmount()

--------------------------------------------------------------------------

React:
  Optimization:
    - for class component > shouldComponentUpdate(nextProps, nextState)
    - for fun component > React.memo(cockpit)

-------------------HOC--------------------------------------------------

----------PropTypes-----------------------------------------------------
PropTypes:
  Install:
    npm install --save prop-types
    import PropTypes from "prop-types";
  Use:  
    Make sure variable type and required function.

----------------------contextType--------------------------------------------------    
   Need to Revisit:
     112, 113